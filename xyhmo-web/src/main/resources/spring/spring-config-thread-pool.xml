<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
    		http://www.springframework.org/schema/beans/spring-beans.xsd"
	   default-autowire="byName">


	<!-- 线程池  -->
	<!-- 配置线程池 -->
	<bean id ="threadPoolTaskExecutor"  class ="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor" >
		<!-- 核心线程数 -->
		<property name="corePoolSize" value="5" />
		<!-- 最大线程数 -->
		<property name="maxPoolSize" value="10" />
		<!-- 队列最大长度 >=mainExecutor.maxSize -->
		<property name="queueCapacity" value="100" />
		<!-- 线程池维护线程所允许的空闲时间 -->
		<property name="keepAliveSeconds" value="3000" />
		<!-- 线程池对拒绝任务(无线程可用)的处理策略 -->
		<!--
        AbortPolicy:当线程池中的数量等于最大线程数时抛出java.util.concurrent.RejectedExecutionException异常;涉及到该异常的任务也不会被执行
        CallerRunsPolicy:当线程池中的数量等于最大线程数时,重试添加当前的任务;它会自动重复调用execute()方法
        DiscardOldestPolicy:当线程池中的数量等于最大线程数时,抛弃线程池中工作队列头部的任务(即等待时间最久Oldest的任务),并执行新传入的任务
        DiscardPolicy:当线程池中的数量等于最大线程数时,丢弃不能执行的新加任务
        !-->
		<property name="rejectedExecutionHandler">
			<bean class="java.util.concurrent.ThreadPoolExecutor$AbortPolicy" />
		</property>
	</bean>

</beans>